library(dada2)
# download the Silva species database from https://zenodo.org/records/4587955
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.1_wSpecies_train_set.fa")
# download the Silva species database from https://zenodo.org/records/4587955
taxa <- assignTaxonomy(seqtab.nochim.RData, "silva_nr99_v138.1_wSpecies_train_set.fa")
setwd("C:/Desktop/Bioinformatics/MicrobiomeDADA2")
load("RData/seqtab.nochim.Rdata")
# download the Silva species database from https://zenodo.org/records/4587955
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.1_wSpecies_train_set.fa.gz")
save(taxa, file = "RData/taxa.RData")
setwd("C:/Desktop/Bioinformatics/MicrobiomeDADA2")
library(phyloseq)
library(dplyr)
library(BiMiCO)
RData<-read.csv("metadata.csv", header=TRUE, row.names = 1)
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
library(dplyr)
library(BiMiCO)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), sample_data(metadata), tax_table(taxa))
physeq
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- past0("ASV", seq(ntaxa(physeq)))
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- pasto("ASV", seq(ntaxa(physeq)))
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- past0("ASV", seq(ntaxa(physeq)))
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) & Order!="Chloroplast" | is.na(Order))
physeq
physeq<-rm_nonbac(physeq)
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) & Order!="Chloroplast" | is.na(Order))
physeq
physeq<-rm_nonbac(physeq)
library(phyloseq)
library(dplyr)
library(BiMiCO)
install.packages("remotes")
remotes::install_github("peterolah001/BiMiCo")
library(phyloseq)
library(dplyr)
library(BiMiCO)
library(phyloseq)
library(dplyr)
library(BiMiCO)
library(BiMiCo)
library(phyloseq)
library(dplyr)
library(BiMiCo)
physeq<-rm_nonbac(physeq)
physeq
save(physeq, file="RData/physeq.RData")
load("Rdata/physeq.RData")
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum),stat="identity", position="fill")
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), sample_data(metadata), tax_table(taxa))
physeq
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) & Order!="Chloroplast" | is.na(Order))
physeq
physeq<-rm_nonbac(physeq)
physeq
save(physeq, file="RData/physeq.RData")
load("Rdata/physeq.RData")
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum),stat="identity", position="fill")
# convert to relative abundance
physeq_relabund <- transform_sample_counts(physeq, function(x) x/ sum(x))
# barplot
plot_bar(physeq_relabund, fill = "Phylum") + geom_bar(aes(color=Phylum,fill=Phylum), stat="identity", position="fill") + facet_wrap(~body.site, scales= "free")
plot_richness(physeq, x="body.site", color= "subject",
measures=c("Observed","Simpson", "Shannon"))
plot_richness(physeq, x="subject", color= "body.site",
measures=c("Observed","Simpson", "Shannon"))
alpha <- estimate_richness(physeq, measure=c("Observed","Simpson", "Shannon"))
observed <- shapiro.test(alpha$Observed)
shannon <- shapiro.test(alpha$Shannon)
simpson <- shapiro.test(alpha$Simpson)
# print
print(observed)
print(shannon)
print(simpson)
# extract sample information from the physeq object
samples <- sample_data(physeq)
# if samples is a phyloseq sample_data object, convert it to a data frame if (class(samples) == "sample_data"){samples <- data.frame(sample_data(samples))}
# add a column to alpha with sample names
alpha$sample <- rownames(alpha)
# merge alpha diversity data and sample data
alpha <- merge(alpha, samples, by = "sample")
# extract sample information from the physeq object
samples <- sample_data(physeq)
# if samples is a phyloseq sample_data object, convert it to a data frame
if (class(samples) == "sample_data"){samples <- data.frame(sample_data(samples))}
# add a column to alpha with sample names
alpha$sample <- rownames(alpha)
# merge alpha diversity data and sample data
alpha <- merge(alpha, samples, by = "sample")
# Perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ subject, data = alpha)
test_simpson <- wilcox.test(Simpson ~ subject, data = alpha)
test_shannnon <- t.test(Shannon ~ subject, data = alpha)
# Printing the results
print(test_observed)
print(test_simpson)
print(test_shannnon)
# Perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ reported.antibiotic.usage, data = alpha)
test_simpson <- wilcox.test(Simpson ~ reported.antibiotic.usage, data = alpha)
test_shannnon <- t.test(Shannon ~ reported.antibiotic.usage, data = alpha)
# Printing the results
print(test_observed)
print(test_simpson)
print(test_shannnon)
kruskal.test(Simpson ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Simpson, alpha$body.site, p.adjust.method="holm")
kruskal.test(Observed ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Observed, alpha$body.site, p.adjust.method="holm")
shannonanova <- aov(Shannon ~ body.site, data=alpha)
summary(shannonanova)
TukeyHSD(shannonanova)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
minTotRelAbun = .00005
x = taxa_sums(physeq)
load("Rdata/physeq.RData")
minTotRelAbun = .00005
x = taxa_sums(physeq)
keepTaxa = (x / sum(x)) > minTotRelAbun
physeqprune = prune_taxa(keepTaxa, physeq)
physeqprune
library(devtools)
library(devtools)
install.packages("devtools")
install_github("Russel88/MicEco")
install_github("Russel88/MicEco")
library(MicEco)
install_github("Russel88/MicEco")
library(devtools)
install_github("Russel88/MicEco")
library(MicEco)
install_github("Russel88/MicEco")
install_github("Russel88/MicEco")
library(MicEco)
bodysite=ps_venn(
physecprune,
"body.site",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = True
)
bodysite=ps_venn(
physecprune,
"body.site",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = True)
bodysite=ps_venn(
physecprune,
"body.site",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = TRUE
)
bodysite=ps_venn(
physecprune,
"body.site",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = TRUE,
)
bodysite=ps_venn(
physeqprune,
"body.site",
fraction = .25,
weight = FALSE,
relative = TRUE,
plot = TRUE
)
bodysite
set.seed(777)
dist = phyloseq::distance(physeqprune, method="bray", weighted=TRUE)
ordination = ordinate(physeqprune, method="NMDS", distance=dist)
set.seed(777)
dist = phyloseq::distance(physeqprune, method="bray", weighted=TRUE)
ordination = ordinate(physeqprune, method="NMDS", distance=dist)
braysubject=plot_ordinate(physeqprune, ordination, color="subject") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=subject))
braysubject=plot_ordination(physeqprune, ordination, color="subject") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=subject))
braysubject
braysubject=plot_ordination(physeqprune, ordination, color="body.site") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=body.site))
braybodysite
braysubject=plot_ordination(physeqprune, ordination, color="body.site") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=body.site))
braybody.site
braybodysite=plot_ordination(physeqprune, ordination, color="body.site") + theme_classic() +
theme(strip.background = element_blank()) + stat_ellipse(aes(group=body.site))
braybodysite
install.packages("vegan")
install.packages("vegan")
library(vegan)
adonis2(dist ~ sample_data(physeqprune)subject)
adonis2(dist ~ sample_data(physeqprune)$subject)
adonis2(dist ~ sample_data(physeqprune)$body.site)
ps.disper<-betadisper(dist, sample_data(physeqprune)$body.site)
permutest(ps.disper, pair=TRUE)
adonis2(dist ~ sample_data(physeqprune)$reported.antibiotic.usage)
adonis2(dist ~ sample_data(physeqprune)$body.site)
ps.disper<-betadisper(dist, sample_data(physeqprune)$body.site)
permutest(ps.disper, pair=TRUE)
brayabusage=plot_ordination(Physeqprune, ordination
color="reported.antibiotic.usage") + theme_classic() + theme(strip.background = element_blank()) + stat_ellipse(aes(group=subject))
braysubject=plot_ordination(Physeqprune, ordination
color="reported.antibiotic.usage") + theme_classic() + theme(strip.background = element_blank()) + stat_ellipse(aes(group=subject))
braysubject=plot_ordination(Physeqprune, ordination
color="reported.antibiotic.usage") +
braysubject=plot_ordination(physeqprune, ordination
color="reported.antibiotic.usage") +
braysubject=plot_ordination(physeqprune, ordination,
color="reported.antibiotic.usage") +
theme_classic() +
theme(strip.background = element_blank()) +  stat_ellipse(aes(group=subject))
braysubject
setwd("C:/Desktop/Bioinformatics/MicrobiomeSectionReport")
library(dada2)
path <- "sequences"
list.files(path)
qiime dada2 denoise-paired\
qiimedada2 denoise-paired\
qiime-dada2 denoise-paired\
--i-demultiplexed-seqs demux.qza\
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.11")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.18")
library(dada2)
# fastq filenames have format: SAMPLENAME_R1_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
names(filtFs) <- sample.names
# quality decreases at 200
out <- filterAndTrim(fnFs, filtFs, truncLen=c(200),
maxN=0, maxEE=c(2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
head(out)
