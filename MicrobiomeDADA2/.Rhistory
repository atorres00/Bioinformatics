library(dada2)
# download the Silva species database from https://zenodo.org/records/4587955
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.1_wSpecies_train_set.fa")
# download the Silva species database from https://zenodo.org/records/4587955
taxa <- assignTaxonomy(seqtab.nochim.RData, "silva_nr99_v138.1_wSpecies_train_set.fa")
setwd("C:/Desktop/Bioinformatics/MicrobiomeDADA2")
load("RData/seqtab.nochim.Rdata")
# download the Silva species database from https://zenodo.org/records/4587955
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.1_wSpecies_train_set.fa.gz")
save(taxa, file = "RData/taxa.RData")
setwd("C:/Desktop/Bioinformatics/MicrobiomeDADA2")
library(phyloseq)
library(dplyr)
library(BiMiCO)
RData<-read.csv("metadata.csv", header=TRUE, row.names = 1)
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
library(dplyr)
library(BiMiCO)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), sample_data(metadata), tax_table(taxa))
physeq
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- past0("ASV", seq(ntaxa(physeq)))
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- pasto("ASV", seq(ntaxa(physeq)))
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- past0("ASV", seq(ntaxa(physeq)))
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) & Order!="Chloroplast" | is.na(Order))
physeq
physeq<-rm_nonbac(physeq)
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) & Order!="Chloroplast" | is.na(Order))
physeq
physeq<-rm_nonbac(physeq)
library(phyloseq)
library(dplyr)
library(BiMiCO)
install.packages("remotes")
remotes::install_github("peterolah001/BiMiCo")
library(phyloseq)
library(dplyr)
library(BiMiCO)
library(phyloseq)
library(dplyr)
library(BiMiCO)
library(BiMiCo)
library(phyloseq)
library(dplyr)
library(BiMiCo)
physeq<-rm_nonbac(physeq)
physeq
save(physeq, file="RData/physeq.RData")
load("Rdata/physeq.RData")
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum),stat="identity", position="fill")
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), sample_data(metadata), tax_table(taxa))
physeq
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) & Order!="Chloroplast" | is.na(Order))
physeq
physeq<-rm_nonbac(physeq)
physeq
save(physeq, file="RData/physeq.RData")
load("Rdata/physeq.RData")
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum),stat="identity", position="fill")
# convert to relative abundance
physeq_relabund <- transform_sample_counts(physeq, function(x) x/ sum(x))
# barplot
plot_bar(physeq_relabund, fill = "Phylum") + geom_bar(aes(color=Phylum,fill=Phylum), stat="identity", position="fill") + facet_wrap(~body.site, scales= "free")
plot_richness(physeq, x="body.site", color= "subject",
measures=c("Observed","Simpson", "Shannon"))
plot_richness(physeq, x="subject", color= "body.site",
measures=c("Observed","Simpson", "Shannon"))
alpha <- estimate_richness(physeq, measure=c("Observed","Simpson", "Shannon"))
observed <- shapiro.test(alpha$Observed)
shannon <- shapiro.test(alpha$Shannon)
simpson <- shapiro.test(alpha$Simpson)
# print
print(observed)
print(shannon)
print(simpson)
# extract sample information from the physeq object
samples <- sample_data(physeq)
# if samples is a phyloseq sample_data object, convert it to a data frame if (class(samples) == "sample_data"){samples <- data.frame(sample_data(samples))}
# add a column to alpha with sample names
alpha$sample <- rownames(alpha)
# merge alpha diversity data and sample data
alpha <- merge(alpha, samples, by = "sample")
# extract sample information from the physeq object
samples <- sample_data(physeq)
# if samples is a phyloseq sample_data object, convert it to a data frame
if (class(samples) == "sample_data"){samples <- data.frame(sample_data(samples))}
# add a column to alpha with sample names
alpha$sample <- rownames(alpha)
# merge alpha diversity data and sample data
alpha <- merge(alpha, samples, by = "sample")
# Perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ subject, data = alpha)
test_simpson <- wilcox.test(Simpson ~ subject, data = alpha)
test_shannnon <- t.test(Shannon ~ subject, data = alpha)
# Printing the results
print(test_observed)
print(test_simpson)
print(test_shannnon)
# Perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ reported.antibiotic.usage, data = alpha)
test_simpson <- wilcox.test(Simpson ~ reported.antibiotic.usage, data = alpha)
test_shannnon <- t.test(Shannon ~ reported.antibiotic.usage, data = alpha)
# Printing the results
print(test_observed)
print(test_simpson)
print(test_shannnon)
kruskal.test(Simpson ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Simpson, alpha$body.site, p.adjust.method="holm")
kruskal.test(Observed ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Observed, alpha$body.site, p.adjust.method="holm")
shannonanova <- aov(Shannon ~ body.site, data=alpha)
summary(shannonanova)
TukeyHSD(shannonanova)
